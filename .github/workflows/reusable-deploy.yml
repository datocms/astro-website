on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DATOCMS_API_TOKEN:
        required: true
    inputs:
      environment:
        required: true
        type: string
      strategy:
        required: false
        type: string
        default: rolling
      release-tag:
        required: false
        type: string
        default: ''
      no-cache:
        required: false
        type: boolean
        default: false

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DATOCMS_API_TOKEN: ${{ secrets.DATOCMS_API_TOKEN }}

jobs:
  deploy:
    name: Deploy on ${{ inputs.environment }}
    runs-on: blacksmith-4vcpu-ubuntu-2404-arm

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List files
        run: ls -a

      # 1) Setup QEMU (optional, but recommended for multi‑arch)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # 2) Setup Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3) Cache Docker BuildKit layers
      - name: Cache Docker layers
        uses: useblacksmith/cache@v5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}-${{ hashFiles('Dockerfile', '.dockerignore', 'package-lock.json') }}

      # 4) Log in to GitHub Container Registry (for the `docker push` executed by `cubo deploy`)
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup Node
        uses: useblacksmith/setup-node@v5
        with:
          node-version: 20
          cache: 'npm'
      - name: Install npm dependencies
        run: npm ci

      - name: Deploy
        shell: bash
        run: |
          CMD="./node_modules/.bin/cubo deploy \
            --env '${{ inputs.environment }}' \
            --strategy '${{ inputs.strategy }}'"

          if [ -n "${{ inputs.release-tag }}" ]; then
            CMD="$CMD --release-tag '${{ inputs.release-tag }}'"
          fi

          if ${{ inputs.no-cache }}; then
            CMD="$CMD --no-cache"
          fi

          echo "➤ $CMD"
          eval $CMD

      - name: Invalidate CDN
        run: ./node_modules/.bin/cubo run 'npm run invalidate-everything' --env '${{ inputs.environment }}'
