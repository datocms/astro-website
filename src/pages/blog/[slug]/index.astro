---
import {
  render as toPlainText,
  type StructuredTextDocument,
} from 'datocms-structured-text-to-plain-text';
import { isHeading } from 'datocms-structured-text-utils';
import { Image } from '~/components/blocks/Image';
import { InternalVideo } from '~/components/blocks/InternalVideo';
import { CodesandboxEmbedBlock } from '~/components/blocks/CodesandboxEmbedBlock';
import { CtaButton } from '~/components/blocks/CtaButton';
import { Demo } from '~/components/blocks/Demo';
import { MultipleDemosBlock } from '~/components/blocks/MultipleDemosBlock';
import { ShowcaseProjectBlock } from '~/components/blocks/ShowcaseProjectBlock';
import { Table } from '~/components/blocks/Table';
import { TutorialVideo } from '~/components/blocks/TutorialVideo';
import { Video } from '~/components/blocks/Video';
import { QuestionAnswer } from '~/components/blocks/QuestionAnswer';
import { InterstitialTitle } from '~/components/InterstitialTitle';
import { ResponsiveImage } from '~/components/ResponsiveImage';
import { Text } from '~/components/structuredText/Text';
import { Wrapper } from '~/components/Wrapper';
import { Layout } from '~/layouts/Layout';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { filterNodes } from '~/lib/datocms/filterNodes';
import { withAllComponents } from '~/lib/datocms/structuredText';
import { formatDate } from '~/lib/formatters';
import { avoidAstroTypeCheckBug, notFoundResponse } from '~/lib/notFoundResponse';
import { slugify } from '~/lib/slugify';
import { query } from './_graphql';
import s from './_style.module.css';
import { Prose } from '~/components/Prose';
import { BlogPostInline } from '~/components/inlineRecords/BlogPostInline';
import { ChangelogEntryInline } from '~/components/inlineRecords/ChangelogEntryInline';
import { BlogPostLink } from '~/components/linkToRecords/BlogPostLink';
import { ChangelogEntryLink } from '~/components/linkToRecords/ChangelogEntryLink';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';
import { overrideSeo, seoTwitterCard } from '~/lib/datocms/seo';

const variables = { slug: Astro.params.slug! };
const { post } = await executeQuery(Astro, query, { variables });

if (!post) {
  avoidAstroTypeCheckBug(notFoundResponse);
  return notFoundResponse();
}

const tocItems = filterNodes(
  (post.content.value as StructuredTextDocument).document,
  isHeading,
).map((heading) => {
  const innerText = toPlainText(heading)!;

  return {
    url: `#${slugify(innerText)}`,
    label: innerText,
  };
});
---

<Layout additionalSeo={overrideSeo(post.seo, seoTwitterCard('summary_large_image'))}>
  <Fragment slot="head">
    {
      post._firstPublishedAt && (
        <meta
          property="article:published_time"
          content={new Date(post._firstPublishedAt).toISOString()}
        />
      )
    }
  </Fragment>

  <InterstitialTitle
    seoAnalysis={post.yoastAnalysis}
    kicker={post.seoH1 || 'The DatoCMS Blog'}
    style="two"
    mainTitleOfPage
  >
    {post.title}
  </InterstitialTitle>
  <div class={s.postWrapper}>
    <Wrapper>
      <div class={s.info}>
        <div class={s.avatarWrapper}>
          {
            post.author.map((author, i) => (
              <ResponsiveImage
                pictureClass={s.avatar}
                data={author.avatar.responsiveImage}
                pictureStyle={{ zIndex: 10 - i }}
              />
            ))
          }
        </div>
        <p>
          Posted on{' '}
          {post._firstPublishedAt ? formatDate(post._firstPublishedAt) : '???'}{' '}
          by{' '}
          {
            post.author.map((author, i) => (
              <span>
                {author.name}
                {i < post.author.length - 2 ? ', ' : i === post.author.length - 2 ? ' and ' : ''}
              </span>
            ))
          }
        </p>
      </div>

      <div id="main-content">
        <Prose class={s.body}>
          <Text
            data={post.content}
            blockComponents={withAllComponents(post.content.blocks, {
              ImageRecord: Image,
              TableRecord: Table,
              DemoRecord: Demo,
              MultipleDemosBlockRecord: MultipleDemosBlock,
              InternalVideoRecord: InternalVideo,
              TutorialVideoRecord: TutorialVideo,
              VideoRecord: Video,
              ShowcaseProjectBlockRecord: ShowcaseProjectBlock,
              CodesandboxEmbedBlockRecord: CodesandboxEmbedBlock,
              CtaButtonRecord: CtaButton,
              QuestionAnswerRecord: QuestionAnswer,
            })}
            inlineRecordComponents={withAllComponents(post.content.links, {
              BlogPostRecord: BlogPostInline,
              ChangelogEntryRecord: ChangelogEntryInline,
            })}
            linkToRecordComponents={withAllComponents(post.content.links, {
              BlogPostRecord: BlogPostLink,
              ChangelogEntryRecord: ChangelogEntryLink,
            })}
          />
        </Prose>
      </div>
    </Wrapper>
    {
      tocItems.length > 4 && (
        <div class={s.tocWrapper}>
          <div class={s.toc}>
            <div class={s.tocTitle}>In this article:</div>
            <ul>
              {tocItems.map((item) => (
                <li>
                  <a href={item.url}>{item.label}</a>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )
    }
  </div>

  <DraftModeQueryListener query={query} variables={variables} />
</Layout>
