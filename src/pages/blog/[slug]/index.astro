---
import {
  render as toPlainText,
  type StructuredTextDocument,
} from 'datocms-structured-text-to-plain-text';
import { isHeading } from 'datocms-structured-text-utils';
import { Image } from '~/components/blocks/Image';
import { InternalVideo } from '~/components/blocks/InternalVideo';
import { CodesandboxEmbedBlock } from '~/components/blocks/CodesandboxEmbedBlock';
import { CtaButton } from '~/components/blocks/CtaButton';
import { Demo } from '~/components/blocks/Demo';
import { MultipleDemosBlock } from '~/components/blocks/MultipleDemosBlock';
import { ShowcaseProjectBlock } from '~/components/blocks/ShowcaseProjectBlock';
import { Table } from '~/components/blocks/Table';
import { TutorialVideo } from '~/components/blocks/TutorialVideo';
import { Video } from '~/components/blocks/Video';
import { QuestionAnswer } from '~/components/blocks/QuestionAnswer';
import { InterstitialTitle } from '~/components/InterstitialTitle';
import { ResponsiveImage } from '~/components/ResponsiveImage';
import { ensureValidStructuredTextProps } from '@datocms/astro';
import { Text } from '~/components/structuredText/Text';
import { Wrapper } from '~/components/Wrapper';
import { Layout } from '~/layouts/Layout';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { filterNodes } from '~/lib/datocms/filterNodes';
import { formatDate } from '~/lib/formatters';
import { avoidAstroTypeCheckBug, notFoundResponse } from '~/lib/notFoundResponse';
import { slugify } from '~/lib/slugify';
import { query, siblingsQuery } from './_graphql';
import { Prose } from '~/components/Prose';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';
import { overrideSeo, seoTwitterCard } from '~/lib/datocms/seo';
import { defaultLinkToRecordComponents } from '~/components/linkToRecords';
import { defaultInlineRecordComponents } from '~/components/inlineRecords';
import { SameLevelNavigation } from '~/components/SameLevelNavigation';
import { Card } from '~/components/Card';
import { buildUrlForBlogPost } from '~/lib/datocms/gqlUrlBuilder/blogPost';
import { MarkdownActionsDropdown } from '~/components/MarkdownActionsDropdown';
import s from './_style.module.css';

const variables = { slug: Astro.params.slug! };
const { post } = await executeQuery(Astro, query, { variables });

if (!post) {
  avoidAstroTypeCheckBug(notFoundResponse);
  return notFoundResponse();
}

const tocItems = filterNodes(
  (post.content.value as StructuredTextDocument).document,
  isHeading,
).map((heading) => {
  const innerText = toPlainText(heading)!;

  return {
    url: `#${slugify(innerText)}`,
    label: innerText,
  };
});

const dateTime = post._firstPublishedAt ? post._firstPublishedAt : post._createdAt;

const { previous, next } = await executeQuery(Astro, siblingsQuery, {
  variables: { dateTime, slug: post.slug },
});

const markdownUrl = new URL(Astro.url.href);
markdownUrl.pathname = Astro.url.pathname.endsWith('.md')
  ? Astro.url.pathname
  : `${Astro.url.pathname}.md`;
---

<Layout seo={overrideSeo(post.seo, seoTwitterCard('summary_large_image'))}>
  <Fragment slot="head">
    {
      post._firstPublishedAt && (
        <meta
          property="article:published_time"
          content={new Date(post._firstPublishedAt).toISOString()}
        />
      )
    }
  </Fragment>

  <div id="main-content">
    <InterstitialTitle
      seoAnalysis={post.yoastAnalysis}
      kicker={post.seoH1 || 'The DatoCMS Blog'}
      style="two"
      mainTitleOfPage
    >
      {post.title}
    </InterstitialTitle>
    <div class={s.postWrapper}>
      <Wrapper>
        <div class={s.info}>
          <div class={s.avatarWrapper} data-datocms-noindex>
            {
              post.author.map((author, i) => (
                <ResponsiveImage
                  pictureClass={s.avatar}
                  data={author.avatar.responsiveImage}
                  pictureStyle={{ zIndex: 10 - i }}
                />
              ))
            }
          </div>
          <p>
            Posted on{' '}
            {post._firstPublishedAt ? formatDate(post._firstPublishedAt) : '???'}{' '}
            by{' '}
            {
              post.author.map((author, i) => (
                <span>
                  {author.name}
                  {i < post.author.length - 2 ? ', ' : i === post.author.length - 2 ? ' and ' : ''}
                </span>
              ))
            }
          </p>
          <MarkdownActionsDropdown markdownUrl={markdownUrl.href} />
        </div>

        <Prose class={s.body}>
          <Text
            {...ensureValidStructuredTextProps({
              data: post.content,
              blockComponents: {
                ImageRecord: Image,
                TableRecord: Table,
                DemoRecord: Demo,
                MultipleDemosBlockRecord: MultipleDemosBlock,
                InternalVideoRecord: InternalVideo,
                TutorialVideoRecord: TutorialVideo,
                VideoRecord: Video,
                ShowcaseProjectBlockRecord: ShowcaseProjectBlock,
                CodesandboxEmbedBlockRecord: CodesandboxEmbedBlock,
                CtaButtonRecord: CtaButton,
                QuestionAnswerRecord: QuestionAnswer,
              },
              linkToRecordComponents: defaultLinkToRecordComponents,
              inlineRecordComponents: defaultInlineRecordComponents,
            })}
          />
        </Prose>
      </Wrapper>
      {
        tocItems.length > 4 && (
          <div class={s.tocWrapper} data-datocms-noindex>
            <div class={s.toc}>
              <div class={s.tocTitle}>In this article:</div>
              <ul>
                {tocItems.map((item) => (
                  <li>
                    <a href={item.url}>{item.label}</a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )
      }
    </div>
  </div>

  {
    (previous || next) && (
      <SameLevelNavigation
        title="Want more?"
        subtitle="Check out other recent stories we've written on our blog"
      >
        {previous && (
          <Card
            href={buildUrlForBlogPost(previous)}
            title={previous.title}
            orientation="horizontal"
            size="small"
            fullTitleLength={true}
          >
            <Fragment slot="image">
              <ResponsiveImage data={previous.coverImage.responsiveImage} />
            </Fragment>
            {previous._firstPublishedAt ? formatDate(previous._firstPublishedAt) : '???'}
          </Card>
        )}
        {next && (
          <Card
            href={buildUrlForBlogPost(next)}
            title={next.title}
            orientation="horizontal"
            size="small"
            fullTitleLength={true}
          >
            <Fragment slot="image">
              <ResponsiveImage data={next.coverImage.responsiveImage} />
            </Fragment>
            {next._firstPublishedAt ? formatDate(next._firstPublishedAt) : '???'}
          </Card>
        )}
      </SameLevelNavigation>
    )
  }

  <DraftModeQueryListener query={query} variables={variables} />
</Layout>
