---
import { graphql } from '~/lib/datocms/graphql';
import Layout from '../layouts/Layout.astro';
import { TagFragment } from '~/lib/datocms/commonFragments';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { StructuredText } from '@datocms/astro';

import { HeadingWithAnchorLink } from '~/components/HeadingWithAnchorLink';

import { isDraftModeEnabled } from '~/lib/draftMode';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';

import { PageInline } from '~/components/inlineRecord/PageInline';
import { PageInlineFragment } from '~/components/inlineRecord/PageInline/fragments';

import { PageLink } from '~/components/linkToRecord/PageLink';
import { PageLinkFragment } from '~/components/linkToRecord/PageLink/fragments';

import { VideoBlock } from '~/components/blocks/VideoBlock';
import { VideoBlockFragment } from '~/components/blocks/VideoBlock/fragments';

import { ImageBlock } from '~/components/blocks/ImageBlock';
import { ImageBlockFragment } from '~/components/blocks/ImageBlock/fragments';

import { ImageGalleryBlock } from '~/components/blocks/ImageGalleryBlock';
import { ImageGalleryBlockFragment } from '~/components/blocks/ImageGalleryBlock/fragments';

/**
 * The GraphQL query that will be executed for this route to generate the page
 * content and metadata.
 *
 * Thanks to gql.tada, the result will be fully typed!
 */
const query = graphql(
  /* GraphQL */ `
    query BasicPageQuery {
      page {
        _seoMetaTags {
          ...TagFragment
        }
        title
        _firstPublishedAt
        structuredText {
          value
          blocks {
            ... on RecordInterface {
              id
              __typename
            }
            ... on ImageBlockRecord {
              ...ImageBlockFragment
            }
            ... on ImageGalleryBlockRecord {
              ...ImageGalleryBlockFragment
            }
            ... on VideoBlockRecord {
              ...VideoBlockFragment
            }
          }
          links {
            ... on RecordInterface {
              id
              __typename
            }
            ...PageLinkFragment
            ...PageInlineFragment
          }
        }
      }
    }
  `,
  [
    TagFragment,
    ImageBlockFragment,
    ImageGalleryBlockFragment,
    VideoBlockFragment,
    PageLinkFragment,
    PageInlineFragment,
  ],
);

const draftModeEnabled = isDraftModeEnabled(Astro.cookies);
const { page } = await executeQuery(query, { includeDrafts: draftModeEnabled });

if (!page) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}
---

<Layout additionalSeo={page._seoMetaTags}>
  <h1>{page.title}</h1>
  {
    /*
     * Structured Text is a JSON format similar to HTML, but with the advantage
     * of a significantly reduced and tailored set of possible tags
     * for editorial content, along with the capability to create hyperlinks
     * to other DatoCMS records and embed custom DatoCMS blocks.
     */
  }
  <StructuredText
    data={page.structuredText}
    blockComponents={/*
     * If the structured text embeds any blocks, it's up to you to decide
     * how to render them:
     */
    {
      ImageBlockRecord: ImageBlock,
      ImageGalleryBlockRecord: ImageGalleryBlock,
      VideoBlockRecord: VideoBlock,
    }}
    linkToRecordComponents={/*
     * If the structured text includes a link to another DatoCMS record,
     * it's your decision to determine where the link should lead, or if
     * you wish to customize its appearance:
     */
    {
      PageRecord: PageLink,
    }}
    inlineRecordComponents={/*
     * If the structured text includes a reference to another DatoCMS
     * record, it's up to you to decide how to render them:
     */
    {
      PageRecord: PageInline,
    }}
    nodeOverrides={/*
     * You can also override the default rendering of certain nodes.
     * In this case, we want to tweak the way headings (h1-h6) are rendered.
     */ {
      heading: HeadingWithAnchorLink,
    }}
  />
  <footer>Published at {page._firstPublishedAt}</footer>

  <DraftModeQueryListener query={query} />
</Layout>
