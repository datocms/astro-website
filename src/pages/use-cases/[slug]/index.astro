---
import { Layout } from '~/layouts/Layout';
import { Wrapper } from '~/components/Wrapper';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { query } from './_graphql';
import { notFoundResponse, avoidAstroTypeCheckBug } from '~/lib/notFoundResponse';
import { Button } from '~/components/Button';
import { ResponsiveImage } from '~/components/ResponsiveImage';
import { LogosBar } from '~/components/LogosBar';
import { InterstitialTitle } from '~/components/InterstitialTitle';
import { Space } from '~/components/Space';
import { Svg } from '~/components/Svg';
import { Prose } from '~/components/Prose';
import { Checks } from '~/components/Checks';
import { InlineText } from '~/components/structuredText/InlineText';
import { ensureValidStructuredTextProps } from '@datocms/astro';
import { Text } from '~/components/structuredText/Text';
import { StripWithContent } from '~/components/StripWithContent';
import { buildUrlFromGql } from '~/lib/datocms/gqlUrlBuilder';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';
import { SingleQuote } from '~/components/quote/SingleQuote';
import s from './_style.module.css';

const variables = { slug: Astro.params.slug! };
const { page } = await executeQuery(Astro, query, { variables });

if (!page) {
  avoidAstroTypeCheckBug(notFoundResponse);
  return notFoundResponse();
}

const { quotes = [] } = page;
---

<Layout seo={page._seoMetaTags} noFinalCta>
  <Wrapper>
    <div class={s.hero}>
      <div class={s.heroBody}>
        <h1 class={s.heroTitle}>
          <InlineText {...ensureValidStructuredTextProps({ data: page.title })} />
        </h1>
        <div class={s.heroSubtitle}>
          <InlineText {...ensureValidStructuredTextProps({ data: page.subtitle })} />
        </div>
        <div class={s.buttonContainer}>
          <Button as="a" href="https://dashboard.datocms.com/signup"> Try it for free </Button>
          <Button as="a" s="invert" href="/contact"> Contact sales </Button>
        </div>
      </div>
      <div class={s.heroImageWrapper}>
        <div class={s.heroImage}>
          <ResponsiveImage data={page.heroCustomer.responsiveImage} />
        </div>
        <div class={s.heroImage}>
          <ResponsiveImage data={page.heroProduct.responsiveImage} />
        </div>
      </div>
    </div>
  </Wrapper>

  <LogosBar
    title="We power experiences for over half a billion users"
    clients={[
      'svg/logos/polestar',
      'svg/logos/hashicorp',
      'svg/logos/verizon',
      'svg/logos/harrys',
      'svg/logos/vercel',
    ]}
  />

  <Space top={1}>
    <StripWithContent>
      <div class={s.starter}>
        <div class={s.starterVisual}>
          <ResponsiveImage data={page.starterImage.responsiveImage} />
        </div>
        <div class={s.starterBody}>
          <h2><InlineText {...ensureValidStructuredTextProps({ data: page.starterTitle })} /></h2>
          <Prose>
            <Text {...ensureValidStructuredTextProps({ data: page.starterDescription })} />
          </Prose>
          <Space top={1}>
            <Button as="a" p="small" href={page.starterLink}>Check it out</Button>
          </Space>
        </div>
      </div>
    </StripWithContent>
  </Space>

  <Wrapper>
    <div class={s.baloons}>
      <div class={s.dev}>
        <p>
          <strong>
            If you’re a <mark class="good">dev</mark>
          </strong>{' '}
          looking to hook up DatoCMS to your repos, head on over to{' '}
          <a href="docs">our docs</a>
        </p>
      </div>

      <div class={s.editor}>
        <p>
          <strong>
            If you’re an{' '}
            <mark class="good">editor, marketer, or content creator</mark>
          </strong>{' '}
          on the fence about whether or not DatoCMS is for you, you’re probably…
        </p>
        <Svg name="svg/illustrations/arrow" />
      </div>
    </div>
  </Wrapper>

  <Wrapper>
    <div class={s.niceBlock}>
      <div class={s.blockIllustration}>
        <Svg name="svg/illustrations/zen" />
      </div>
      <div class={s.blockText}>
        <h2>{page.featuresHeader}</h2>
        <Text {...ensureValidStructuredTextProps({ data: page.featuresDescription })} />
      </div>
    </div>
  </Wrapper>

  {
    page.callout.map((callout, index) => (
      <div class={s.featureWrapper}>
        <StripWithContent background="alternative" stripHeight="partial">
          <section class={s.feature}>
            <div class={s.featureIntro}>
              <article>
                <h3>{callout.title}</h3>
                <Text {...ensureValidStructuredTextProps({ data: callout.description })} />
              </article>

              <div class={s.visual}>
                {callout.image?.responsiveImage && (
                  <ResponsiveImage data={callout.image.responsiveImage} />
                )}
              </div>
            </div>
            <div class={s.featureList}>
              {callout.features.map((feature) => (
                <article class={s.featureListItem}>
                  <div class={s.featureListText}>
                    <h4 class={s.featureTitle}>{feature.title}</h4>
                    <Text {...ensureValidStructuredTextProps({ data: feature.description })} />
                  </div>
                </article>
              ))}
            </div>
          </section>
        </StripWithContent>

        {quotes[index] && (
          <Space top={1} bottom={1}>
            <Wrapper>
              <SingleQuote quote={quotes[index]} />
            </Wrapper>
          </Space>
        )}
      </div>
    ))
  }

  <StripWithContent>
    <div class={s.successStory}>
      <div class={s.successStoryBody}>
        <h2>
          <InlineText {...ensureValidStructuredTextProps({ data: page.successStoryHeader })} />
        </h2>
        <Prose>
          <Text {...ensureValidStructuredTextProps({ data: page.successStorySummary })} />
        </Prose>
        <Space top={1}>
          <Button as="a" p="small" href={buildUrlFromGql(page.caseStudy)}> Check it out </Button>
        </Space>
      </div>

      <div class={s.successStoryImageWrapper}>
        <ResponsiveImage
          data={page.successStoryImage.responsiveImage}
          pictureStyle={{
            objectFit: 'contain',
            objectPosition: 'left',
          }}
        />
      </div>
    </div>
  </StripWithContent>

  <Space top={1}>
    <div class={s.outro}>
      <InterstitialTitle style="one" kicker="Seen enough?">
        Get started with DatoCMS
      </InterstitialTitle>
      <Checks>
        <div class={s.buttonGroup}>
          <Button as="a" href="https://dashboard.datocms.com/signup"> Sign up for free </Button>
          <Button as="a" s="invert" href="https://try.datocms.com" target="_blank">
            Try our interactive demo ⤑
          </Button>
        </div>

        <Fragment slot="checks">
          <li>No credit card</li>
          <li>Easy setup</li>
        </Fragment>
      </Checks>
    </div>
  </Space>

  <DraftModeQueryListener query={query} variables={variables} />
</Layout>
