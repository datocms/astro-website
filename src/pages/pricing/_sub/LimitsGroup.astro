---
import { Svg } from '~/components/Svg';
import s from '../_style.module.css';
import { formatLimit, formatExtra, formatUpperBoundLimitRaw } from './planLimitsHelpers';
import { HintFragment } from '../_graphql';
import type { FragmentOf } from 'gql.tada';
import { type Plan } from './perOwnerPricingPlans';

const limitIds = [
  'users',
  'sites',
  'sandbox_environments',
  'locales',
  'item_types',
  'items',
  'uploadable_bytes',
  'maximum_single_upload_bytes',
  'indexable_pages',
  'history_retention_days',
  'traffic_bytes',
  'api_calls',
  'mux_encoding_seconds',
  'mux_streaming_seconds',
];

type Props = {
  hints: FragmentOf<typeof HintFragment>[];
  freePlan: Plan;
  proPlan: Plan;
};

const { proPlan, hints } = Astro.props;
---

<tr class={s.fTableGroup} data-header-for-group="limits" data-open>
  <td colspan={3}>
    <Svg name="icons/regular/minus-circle" class={s.fTableGroupIcon} data-show-if="open" />
    <Svg name="icons/regular/plus-circle" class={s.fTableGroupIcon} data-show-if="closed" />
    Limits
    {
      (
        <span class={s.fTableGroupCount} data-show-if="closed">
          ({limitIds.length})
        </span>
      )
    }
  </td>
</tr>
{
  limitIds.map((limitId, i) => {
    const hint = hints.find((h) => h.apiId === limitId)!;
    const proPlanLimit = proPlan.attributes.limits.find((l) => l.id === limitId)!;

    return (
      <tr
        class:list={[s.fTableFeature, i % 2 === 0 && s.fTableFeatureOdd]}
        data-part-of-group="limits"
        data-open
      >
        <th class={s.fTableFeatureName}>
          <div class={s.fTableFeatureNameSplit}>
            <div class={s.fTableFeatureNameName}>{hint.name} </div>
            {hint.description && (
              <div class={s.fTableFeatureNameInfo}>
                <Svg name="icons/regular/info-circle" />
                <div class={s.fTableFeatureNameInfoHint}>{hint.description}</div>
              </div>
            )}
          </div>
        </th>
        <td class={s.fTableFeaturePlan}>
          {formatLimit(proPlanLimit)}

          {'extra_packet_amount' in proPlanLimit && proPlanLimit.extra_packet_amount && (
            <div class={s.extra}>
              {formatExtra(proPlanLimit)}
              {'max_extra_packets' in proPlanLimit && proPlanLimit.max_extra_packets && (
                <>, up to {formatUpperBoundLimitRaw(proPlanLimit)}</>
              )}
            </div>
          )}
        </td>

        <td class={s.fTableFeaturePlan}>Custom</td>
      </tr>
    );
  })
}
