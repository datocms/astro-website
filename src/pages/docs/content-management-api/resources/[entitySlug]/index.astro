---
import { ContentPlusToc } from '~/components/docs/ContentPlusToc';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';
import { findGroup, GroupLayout } from '~/layouts/docs/GroupLayout';
import { notFoundResponse } from '~/lib/notFoundResponse';
import { Markdown } from '~/components/Markdown';
import { Prose } from '~/components/docs/Prose';
import { buildSidebarItems } from '~/components/docs/restApi/buildSidebarItems';
import { LanguagePicker } from '~/components/docs/restApi/LanguagePicker';
import { buildTocGroupsFromMarkdown } from '~/components/docs/restApi/EndpointDescriptionWithExamples';
import { analyzePropertiesOfJsonApiEntity } from '~/components/docs/restApi/analyzeSchemaProperties';
import { JsonSchemaObjectAnalysis } from '~/components/docs/restApi/JsonSchemaObjectAnalysis';
import { findEntity } from '~/components/docs/restApi/fetchSchema';
import { isValidLanguage } from '~/components/docs/restApi/LanguagePicker/utils';

const sidebarItems = await buildSidebarItems(Astro, Astro.params.entitySlug!);
const resource = await findEntity(Astro.params.entitySlug!);

const result = await findGroup(Astro, 'content-management-api');

if (!result || !resource) {
  return notFoundResponse();
}

const language = Astro.url.searchParams.get('language') || 'javascript';

if (!isValidLanguage(language)) {
  return notFoundResponse();
}

const [group, queryListenerProps] = result;

const links = resource.links ? resource.links.filter((l) => !l.private) : [];

const objectPayload = analyzePropertiesOfJsonApiEntity(resource, 'entity', 'http');
---

<GroupLayout
  group={group}
  additionalSeo={[]}
  additionalSidebarItems={sidebarItems}
  contentWrapperComponent={LanguagePicker}
>
  <ContentPlusToc tocGroups={buildTocGroupsFromMarkdown(resource.description)}>
    <Fragment slot="kicker">Content Management API > {resource.title}</Fragment>
    <Fragment slot="title">{resource.title}</Fragment>

    <Prose>
      {resource.description && <Markdown of={resource.description} />}

      {
        objectPayload && (
          <>
            <h2>Object payload</h2>
            <JsonSchemaObjectAnalysis object={objectPayload} showRequiredOptional={false} />
          </>
        )
      }

      {
        links.length > 0 && (
          <>
            <h4>Available endpoints</h4>
            <ul>
              {links.map((link) => (
                <li>
                  <a
                    href={`/docs/content-management-api/resources/${Astro.params.entitySlug!}/${link.rel}`}
                  >
                    {link.title}
                  </a>
                </li>
              ))}
            </ul>
          </>
        )
      }
    </Prose>
  </ContentPlusToc>
</GroupLayout>

{queryListenerProps.map((props) => <DraftModeQueryListener {...props} />)}
