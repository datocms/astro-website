---
import { ContentPlusToc } from '~/components/docs/ContentPlusToc';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';
import { findGroup, GroupLayout } from '~/layouts/docs/GroupLayout';
import { notFoundResponse } from '~/lib/notFoundResponse';
import { Markdown } from '@astropub/md';
import { Prose } from '~/components/docs/Prose';
import { buildSidebarItems } from '~/components/docs/cma/buildSidebarItems';
import { findEntity } from '~/components/docs/cma/findEntity';
import { buildTocGroupsFromMarkdown } from '~/components/docs/cma/EndpointDescriptionWithExamples';
import { jsonApiEntityDoc } from '~/components/docs/cma/analyzeSchemaProperties';
import { PropertiesDoc } from '~/components/docs/cma/PropertiesDoc';

const sidebarItems = await buildSidebarItems(Astro.params.entitySlug!);
const resource = await findEntity(Astro.params.entitySlug!);

const result = await findGroup(Astro, 'content-management-api');

if (!result || !resource) {
  return notFoundResponse();
}

const [group, queryListenerProps] = result;

const links = resource.links ? resource.links.filter((l) => !l.private) : [];

const objectPayload = jsonApiEntityDoc(resource, 'entity');
---

<GroupLayout group={group} additionalSeo={[]} additionalSidebarItems={sidebarItems}>
  <ContentPlusToc tocGroups={buildTocGroupsFromMarkdown(resource.description)}>
    <Fragment slot="kicker">Content Management API > {resource.title}</Fragment>
    <Fragment slot="title">{resource.title}</Fragment>

    <Prose>
      {resource.description && <Markdown of={resource.description} />}

      {
        objectPayload && (
          <>
            <h2>Object payload</h2>
            <PropertiesDoc propertiesDoc={objectPayload} showRequiredOptional={false} />
          </>
        )
      }

      {
        links.length > 0 && (
          <>
            <h4>Available endpoints</h4>
            <ul>
              {links.map((link) => (
                <li>
                  <a
                    href={`/docs/content-management-api/resources/${Astro.params.entitySlug!}/${link.rel}`}
                  >
                    {link.title}
                  </a>
                </li>
              ))}
            </ul>
          </>
        )
      }
    </Prose>
  </ContentPlusToc>
</GroupLayout>

{queryListenerProps.map((props) => <DraftModeQueryListener {...props} />)}
