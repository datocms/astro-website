---
import {
  buildObjectPropertiesDoc,
  jsonApiEntityDoc,
} from '~/components/docs/cma/analyzeSchemaProperties';
import { buildSidebarItems } from '~/components/docs/cma/buildSidebarItems';
import {
  buildTocGroupsFromMarkdown,
  EndpointDescriptionWithExamples,
  examplesNotInMarkdown,
} from '~/components/docs/cma/EndpointDescriptionWithExamples';
import { fetchRestClientEndpointInfo } from '~/components/docs/cma/fetchRestClientEndpointInfo';
import { findEntity } from '~/components/docs/cma/findEntity';
import { JsExample } from '~/components/docs/cma/JsExample';
import { PropertiesDoc } from '~/components/docs/cma/PropertiesDoc';
import { ContentPlusToc } from '~/components/docs/ContentPlusToc';
import { Prose } from '~/components/docs/Prose';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';
import { findGroup, GroupLayout } from '~/layouts/docs/GroupLayout';
import { notFoundResponse } from '~/lib/notFoundResponse';

const sidebarItems = await buildSidebarItems(Astro.params.entitySlug!);
const entity = await findEntity(Astro.params.entitySlug!);

const restClientEndpointInfo = await fetchRestClientEndpointInfo(
  Astro.params.entitySlug!,
  Astro.params.endpointRel!,
);

const result = await findGroup(Astro, 'content-management-api');

if (!result || !entity || !restClientEndpointInfo) {
  return notFoundResponse();
}

const [group, queryListenerProps] = result;

const endpoint = entity.links!.find((endpoint) => endpoint.rel === Astro.params.endpointRel);

if (!endpoint) {
  return notFoundResponse();
}

const description = endpoint.documentation?.javascript?.description || endpoint.description;

const examples = endpoint?.documentation?.javascript?.examples || [];

const examplesNotInDescription = examplesNotInMarkdown(examples, description);

const bodyParameters = endpoint.schema?.properties?.data
  ? jsonApiEntityDoc(endpoint.schema.properties.data, 'endpointPayload')
  : undefined;

const queryParameters = endpoint.hrefSchema
  ? buildObjectPropertiesDoc(endpoint.hrefSchema, { considerDeprecatedAndRequiredAsRequired: true })
  : undefined;
---

<GroupLayout group={group} additionalSeo={[]} additionalSidebarItems={sidebarItems}>
  <ContentPlusToc tocGroups={buildTocGroupsFromMarkdown(description, examples)}>
    <Fragment slot="kicker">Content Management API > {entity.title}</Fragment>
    <Fragment slot="title">{endpoint.title}</Fragment>

    <Prose>
      {
        description && (
          <EndpointDescriptionWithExamples
            entity={entity}
            endpoint={endpoint}
            restClientEndpointInfo={restClientEndpointInfo}
            description={description}
            examples={examples}
            exampleComponent={JsExample}
          />
        )
      }

      {
        queryParameters && (
          <>
            <h2>Query parameters</h2>
            <PropertiesDoc propertiesDoc={queryParameters} />
          </>
        )
      }

      {
        bodyParameters && (
          <>
            <h2>Body parameters</h2>
            <PropertiesDoc propertiesDoc={bodyParameters} />
          </>
        )
      }

      {
        examples.length > 0 ? (
          examplesNotInDescription.map((example) => (
            <JsExample
              id={example.id}
              entity={entity}
              endpoint={endpoint}
              restClientEndpointInfo={restClientEndpointInfo}
              example={example}
            />
          ))
        ) : (
          <JsExample
            id="basic-example"
            entity={entity}
            endpoint={endpoint}
            restClientEndpointInfo={restClientEndpointInfo}
            startVisible
          />
        )
      }
    </Prose>
  </ContentPlusToc>
</GroupLayout>

{queryListenerProps.map((props) => <DraftModeQueryListener {...props} />)}
