---
import { Image } from '~/components/blocks/Image';
import { InDepthCtaBlock } from '~/components/blocks/InDepthCtaBlock';
import { InternalVideo } from '~/components/blocks/InternalVideo';
import { Layout } from '~/layouts/Layout';
import { Prose } from '~/components/Prose';
import { Text } from '~/components/structuredText/Text';
import { Video } from '~/components/blocks/Video';
import { Wrapper } from '~/components/Wrapper';
import { avoidAstroTypeCheckBug, notFoundResponse } from '~/lib/notFoundResponse';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { UseCaseHead } from '~/components/useCase/UseCaseHead';
import { UseCaseRecap } from '~/components/useCase/UseCaseRecap';
import { Numbers } from '~/components/numbers/Numbers';
import { NumbersBlock } from '~/components/numbers/NumbersBlock';
import { query } from './_graphql';
import { withAllComponents } from '~/lib/datocms/structuredText';
import s from './_style.module.css';

const { slug } = Astro.params;
const variables = { slug: slug! };
const { page } = await executeQuery(Astro, query, { variables });

if (!page) {
  avoidAstroTypeCheckBug(notFoundResponse);
  return notFoundResponse();
}

const colors =
  page && [page.duotoneColor1.hex, page.duotoneColor2.hex].map((x) => x.replace(/#/, '')).join(',');
const duotone = `duotone=${colors}`;
---

<Layout additionalSeo={page.seo}>
  <div
    style={{
      '--gradient1': page.duotoneColor1.hex,
      '--gradient2': page.duotoneColor2.hex,
      '--accent': page.accentColor.hex,
    }}
  >
    <UseCaseHead
      title={page.title}
      logoUrl={page.logo.url}
      image={`${page.coverImage.url}?fp-y=${page.coverImage.focalPoint.y}&fp-x=${page.coverImage.focalPoint.x}&crop=focalpoint&fit=crop&${duotone}`}
    />

    <div id="usecase"></div>

    <UseCaseRecap>
      <Fragment slot="challenge">
        <Prose>
          <Text data={page.challenge} />
        </Prose>
      </Fragment>
      <Fragment slot="result">
        <Prose>
          <Text data={page.result} />
        </Prose>
      </Fragment>
      <Numbers>
        {
          page.numbers.map((number) => (
            <NumbersBlock title={number.number}>{number.label}</NumbersBlock>
          ))
        }
      </Numbers>
    </UseCaseRecap>

    <div class={s.results}>
      <div class={s.resultsImage}>
        <img
          src={`${page.mainResultsImage.url}?${duotone}&fp-y=${page.mainResultsImage.focalPoint?.y}&crop=focalpoint&fp-x=${page.mainResultsImage.focalPoint?.x}`}
        />
      </div>

      <div class={s.resultsBlocks}>
        <div class={s.resultsTitle}>Biggest wins</div>
        {
          page.mainResults.map((res) => (
            <div class={s.resultsItem}>
              <h3>{res.title}</h3>
              <Text data={res.description} />
            </div>
          ))
        }
      </div>
    </div>

    <Wrapper>
      <div class={s.fullStory}>
        <Prose class={s.body}>
          <Text
            data={page.content}
            blockComponents={withAllComponents(page.content.blocks, {
              ImageRecord: Image,
              InDepthCtaBlockRecord: InDepthCtaBlock,
              InternalVideoRecord: InternalVideo,
              VideoRecord: Video,
            })}
          />
        </Prose>
      </div>
    </Wrapper>
  </div>
</Layout>
