---
import { Image } from '~/components/blocks/Image';
import { InDepthCtaBlock } from '~/components/blocks/InDepthCtaBlock';
import { InternalVideo } from '~/components/blocks/InternalVideo';
import { Layout } from '~/layouts/Layout';
import { Prose } from '~/components/Prose';
import { ensureValidStructuredTextProps } from '@datocms/astro';
import { Text } from '~/components/structuredText/Text';
import { Video } from '~/components/blocks/Video';
import { Wrapper } from '~/components/Wrapper';
import { avoidAstroTypeCheckBug, notFoundResponse } from '~/lib/notFoundResponse';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { query } from './_graphql';
import s from './_style.module.css';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';
import { defaultLinkToRecordComponents } from '~/components/linkToRecords';
import { defaultInlineRecordComponents } from '~/components/inlineRecords';
import { InlineText } from '~/components/structuredText/InlineText';
import { ResponsiveImage } from '~/components/ResponsiveImage';
import { Svg } from '~/components/Svg';
import { StripWithContent } from '~/components/StripWithContent';
import { Bullets } from '~/components/Bullets';
import { cleanDomain } from '~/lib/cleanDomain';
import { buildUrlForUseCasePage } from '~/lib/datocms/gqlUrlBuilder/useCasePage';

const variables = { slug: Astro.params.slug! };
const { page } = await executeQuery(Astro, query, { variables });

if (!page) {
  avoidAstroTypeCheckBug(notFoundResponse);
  return notFoundResponse();
}

const colors =
  page && [page.duotoneColor1.hex, page.duotoneColor2.hex].map((x) => x.replace(/#/, '')).join(',');
const duotone = `duotone=${colors}`;

const projectUrl = page.projectUrl ? page.projectUrl : null;
const useCase = page.useCase ? page.useCase : null;
---

<Layout seo={page.seo}>
  <div
    style={{
      '--gradient1': page.duotoneColor1.hex,
      '--gradient2': page.duotoneColor2.hex,
      '--accent': page.accentColor.hex,
    }}
  >
    <Wrapper>
      <div class={s.hero}>
        <div class={s.heroBody}>
          <div class={s.headKicker}>
            <img src={page.logo.url} />
            <span class={s.plus}>+</span>
            <Svg name="svg/logos/datocms" />
          </div>
          <h1 class={s.heroTitle}>
            <InlineText {...ensureValidStructuredTextProps({ data: page.title })} />
          </h1>
          <div class={s.heroSubtitle}>
            <InlineText {...ensureValidStructuredTextProps({ data: page.subtitle })} />
          </div>
        </div>
        <div class={s.heroImageWrapper}>
          <div class={s.heroImage}>
            <ResponsiveImage data={page.coverImage.responsiveImage} />
          </div>
        </div>
      </div>
    </Wrapper>

    <StripWithContent>
      <Fragment slot="title">In a glance...</Fragment>
      <Wrapper class={s.glanceWrapper}>
        <div class={s.challenge}>
          <h3>Challenge</h3>
          <Text {...ensureValidStructuredTextProps({ data: page.challenge })} />
        </div>
        <div class={s.arrowsWrapper}>
          <div class={s.arrows}>
            <Svg name="svg/illustrations/arrow-sketch-3" />
            <Svg name="svg/illustrations/arrow-sketch-3" />
          </div>
        </div>
        <div class={s.result}>
          <h3>Result</h3>
          <Text {...ensureValidStructuredTextProps({ data: page.result })} />
        </div>
      </Wrapper>
    </StripWithContent>
  </div>

  <!-- Biggest wins -->
  <Wrapper>
    <div class={s.results}>
      <div class={s.resultsImage}>
        <ResponsiveImage data={page.mainResultsImage.responsiveImage} />
      </div>
      <div class={s.resultsBlocks}>
        <div class={s.resultsTitle}>Biggest wins</div>
        <Bullets style="bad">
          {
            page.mainResults.map((res) => (
              <li class={s.resultsItem}>
                <Svg name="icons/regular/check" />

                <h3>{res.title}</h3>
                <Text {...ensureValidStructuredTextProps({ data: res.description })} />
              </li>
            ))
          }
        </Bullets>
      </div>
    </div>
  </Wrapper>

  <StripWithContent>
    <div class={s.numbers}>
      {
        page.numbers.map((item) => (
          <div class={s.numberBlock}>
            <h3 class={s.numberTitle}>{item.number}</h3>
            <p class={s.numberLabel}>{item.label}</p>
          </div>
        ))
      }
    </div>
  </StripWithContent>

  <Wrapper>
    <div class={s.fullStory}>
      <Prose class={s.body}>
        <Text
          {...ensureValidStructuredTextProps({
            data: page.content,
            blockComponents: {
              ImageRecord: Image,
              InDepthCtaBlockRecord: InDepthCtaBlock,
              InternalVideoRecord: InternalVideo,
              VideoRecord: Video,
            },
            linkToRecordComponents: defaultLinkToRecordComponents,
            inlineRecordComponents: defaultInlineRecordComponents,
          })}
        />
      </Prose>

      <aside class={s.aside}>
        {
          page.projectUrl && (
            <>
              <h3>Project</h3>
              <a href={page.projectUrl} target="_blank" rel="noopener noreferrer">
                {cleanDomain(page.projectUrl)}
              </a>
            </>
          )
        }
        {
          page.useCase && (
            <>
              <h3>Use case</h3>
              <a href={buildUrlForUseCasePage(page.useCase)}>{page.useCase.navigationBarTitle}</a>
            </>
          )
        }
      </aside>
    </div>
  </Wrapper>

  <DraftModeQueryListener query={query} variables={variables} />
</Layout>
