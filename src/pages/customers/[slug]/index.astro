---
import { Image } from '~/components/blocks/Image';
import { InDepthCtaBlock } from '~/components/blocks/InDepthCtaBlock';
import { InternalVideo } from '~/components/blocks/InternalVideo';
import { Layout } from '~/layouts/Layout';
import { Prose } from '~/components/Prose';
import { ensureValidStructuredTextProps } from '@datocms/astro';
import { Text } from '~/components/structuredText/Text';
import Head from './_sub/Head.astro';
import Recap from './_sub/Recap.astro';
import { Video } from '~/components/blocks/Video';
import { Wrapper } from '~/components/Wrapper';
import { avoidAstroTypeCheckBug, notFoundResponse } from '~/lib/notFoundResponse';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { query, siblingsQuery } from './_graphql';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';
import { defaultLinkToRecordComponents } from '~/components/linkToRecords';
import { defaultInlineRecordComponents } from '~/components/inlineRecords';
import { SameLevelNavigation } from '~/components/SameLevelNavigation';
import { Card } from '~/components/Card';
import { buildUrlForSuccessStory } from '~/lib/datocms/gqlUrlBuilder/successStory';
import { render as toPlainText } from 'datocms-structured-text-to-plain-text';
import { ResponsiveImage } from '~/components/ResponsiveImage';
import s from './_style.module.css';

const variables = { slug: Astro.params.slug! };
const { page, siblingSlugs } = await executeQuery(Astro, query, { variables });

if (!page) {
  avoidAstroTypeCheckBug(notFoundResponse);
  return notFoundResponse();
}

let relatedItems = [];

const allSiblings = siblingSlugs.map((item) => item.slug);
const currentIndex = allSiblings.indexOf(Astro.params.slug!);

const prevSlug =
  currentIndex > 0 ? allSiblings[currentIndex - 1] : allSiblings[allSiblings.length - 1];

const nextSlug =
  currentIndex < allSiblings.length - 1 ? allSiblings[currentIndex + 1] : allSiblings[0];

if (page.relatedItems?.siblings?.length) {
  relatedItems = [...page.relatedItems.siblings];
} else if (prevSlug && nextSlug) {
  const { prev, next } = await executeQuery(Astro, siblingsQuery, {
    variables: { prevSlug, nextSlug },
  });
  relatedItems.push(prev);
  relatedItems.push(next);
}

const colors =
  page && [page.duotoneColor1.hex, page.duotoneColor2.hex].map((x) => x.replace(/#/, '')).join(',');
const duotone = `duotone=${colors}`;
---

<Layout seo={page.seo}>
  <div
    style={{
      '--gradient1': page.duotoneColor1.hex,
      '--gradient2': page.duotoneColor2.hex,
      '--accent': page.accentColor.hex,
    }}
  >
    <Head
      logoUrl={page.logo.url}
      image={`${page.coverImage.url}?fp-y=${page.coverImage.focalPoint.y}&fp-x=${page.coverImage.focalPoint.x}&crop=focalpoint&fit=crop&${duotone}`}
    >
      <Text {...ensureValidStructuredTextProps({ data: page.title })} />
    </Head>

    <div id="usecase"></div>

    <Recap>
      <Fragment slot="challenge">
        <Text {...ensureValidStructuredTextProps({ data: page.challenge })} />
      </Fragment>
      <Fragment slot="result">
        <Text {...ensureValidStructuredTextProps({ data: page.result })} />
      </Fragment>
      <div class={s.numbers}>
        {
          page.numbers.map((item) => (
            <div class={s.numberBlock}>
              <h3 class={s.numberTitle}>{item.number}</h3>
              <p class={s.numberLabel}>{item.label}</p>
            </div>
          ))
        }
      </div>
    </Recap>

    <div class={s.results}>
      <div class={s.resultsImage}>
        <img
          src={`${page.mainResultsImage.url}?${duotone}&fp-y=${page.mainResultsImage.focalPoint?.y}&crop=focalpoint&fp-x=${page.mainResultsImage.focalPoint?.x}`}
        />
      </div>
      <div class={s.resultsBlocks}>
        <div class={s.resultsTitle}>Biggest wins</div>
        {
          page.mainResults.map((res) => (
            <div class={s.resultsItem}>
              <h3>{res.title}</h3>
              <Text {...ensureValidStructuredTextProps({ data: res.description })} />
            </div>
          ))
        }
      </div>
    </div>

    <Wrapper>
      <div class={s.fullStory}>
        <Prose class={s.body}>
          <Text
            {...ensureValidStructuredTextProps({
              data: page.content,
              blockComponents: {
                ImageRecord: Image,
                InDepthCtaBlockRecord: InDepthCtaBlock,
                InternalVideoRecord: InternalVideo,
                VideoRecord: Video,
              },
              linkToRecordComponents: defaultLinkToRecordComponents,
              inlineRecordComponents: defaultInlineRecordComponents,
            })}
          />
        </Prose>
      </div>
    </Wrapper>

    {
      relatedItems && (
        <SameLevelNavigation
          title={page.relatedItems?.title ?? 'Every Story is different...'}
          subtitle={page.relatedItems?.subtitle ?? undefined}
        >
          {relatedItems
            .filter((item) => item != null)
            .map((item) => (
              <Card
                title={toPlainText(item.title) ?? ''}
                href={buildUrlForSuccessStory(item)}
                size="small"
                orientation={relatedItems.length > 2 ? 'vertical' : 'horizontal'}
              >
                <Fragment slot="image">
                  <ResponsiveImage data={item.coverImage.responsiveImage} />
                </Fragment>
              </Card>
            ))}
        </SameLevelNavigation>
      )
    }

    <DraftModeQueryListener query={query} variables={variables} />
  </div>
</Layout>
