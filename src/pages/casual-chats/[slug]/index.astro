---
import {
  render as toPlainText,
  type StructuredTextDocument,
} from 'datocms-structured-text-to-plain-text';
import { CodesandboxEmbedBlock } from '~/components/blocks/CodesandboxEmbedBlock';
import { CtaButton } from '~/components/blocks/CtaButton';
import { Demo } from '~/components/blocks/Demo';
import { Image } from '~/components/blocks/Image';
import { InternalVideo } from '~/components/blocks/InternalVideo';
import { InterstitialTitle } from '~/components/InterstitialTitle';
import { Layout } from '~/layouts/Layout';
import { MultipleDemosBlock } from '~/components/blocks/MultipleDemosBlock';
import { Prose } from '~/components/Prose';
import { QuestionAnswer } from '~/components/blocks/QuestionAnswer';
import { ResponsiveImage } from '~/components/ResponsiveImage';
import { ShowcaseProjectBlock } from '~/components/blocks/ShowcaseProjectBlock';
import { Table } from '~/components/blocks/Table';
import { ensureValidStructuredTextProps } from '@datocms/astro';
import { Text } from '~/components/structuredText/Text';
import { TutorialVideo } from '~/components/blocks/TutorialVideo';
import { Video } from '~/components/blocks/Video';
import { Wrapper } from '~/components/Wrapper';
import { avoidAstroTypeCheckBug, notFoundResponse } from '~/lib/notFoundResponse';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { filterNodes } from '~/lib/datocms/filterNodes';
import { intersperse } from '~/lib/intersperse';
import { isHeading } from 'datocms-structured-text-utils';
import { query, siblingsQuery } from './_graphql';
import { slugify } from '~/lib/slugify';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';
import { defaultLinkToRecordComponents } from '~/components/linkToRecords';
import { defaultInlineRecordComponents } from '~/components/inlineRecords';
import { SameLevelNavigation } from '~/components/SameLevelNavigation';
import { Card } from '~/components/Card';
import { buildUrlForCustomerStory } from '~/lib/datocms/gqlUrlBuilder/customerStory';
import s from './_style.module.css';

const variables = { slug: Astro.params.slug! };
const { post } = await executeQuery(Astro, query, { variables });

if (!post) {
  avoidAstroTypeCheckBug(notFoundResponse);
  return notFoundResponse();
}

const tocItems = filterNodes(
  (post.content.value as StructuredTextDocument).document,
  isHeading,
).map((heading) => {
  const innerText = toPlainText(heading)!;

  return {
    url: `#${slugify(innerText)}`,
    label: innerText,
  };
});

const dateTime = post._firstPublishedAt ? post._firstPublishedAt : post._createdAt;

const { previous, next, first, last } = await executeQuery(Astro, siblingsQuery, {
  variables: { dateTime, slug: post.slug },
});

const prevItem = previous ?? last;
const nextItem = next ?? first;

const siblings = post.siblings;
const siblingsWithFallback =
  siblings.length > 0 ? siblings : [prevItem, nextItem].filter((item) => item !== null);
---

<Layout seo={post.seo}>
  <InterstitialTitle
    seoAnalysis={post.yoastAnalysis}
    kicker={post.seoH1 || 'Customer Stories'}
    style="two"
    mainTitleOfPage
  >
    {post.title}
  </InterstitialTitle>

  <div class={s.postWrapper}>
    <Wrapper>
      <div class={s.info}>
        <div class={s.avatarWrapper}>
          {
            post.people.map((author, i) => (
              <ResponsiveImage
                pictureClass={s.avatar}
                data={author.avatar.responsiveImage}
                pictureStyle={{ zIndex: 10 - i }}
              />
            ))
          }
        </div>
        <p>
          In conversation with
          {
            intersperse(
              post.people.map((person) => (
                <span>
                  {person.name} ({person.title})
                </span>
              )),
              ', ',
              ' and ',
            )
          }
        </p>
      </div>

      <div id="main-content">
        <Prose class={s.body}>
          <Text
            {...ensureValidStructuredTextProps({
              data: post.content,
              blockComponents: {
                ImageRecord: Image,
                TableRecord: Table,
                DemoRecord: Demo,
                MultipleDemosBlockRecord: MultipleDemosBlock,
                InternalVideoRecord: InternalVideo,
                TutorialVideoRecord: TutorialVideo,
                VideoRecord: Video,
                ShowcaseProjectBlockRecord: ShowcaseProjectBlock,
                CodesandboxEmbedBlockRecord: CodesandboxEmbedBlock,
                CtaButtonRecord: CtaButton,
                QuestionAnswerRecord: QuestionAnswer,
              },
              linkToRecordComponents: defaultLinkToRecordComponents,
              inlineRecordComponents: defaultInlineRecordComponents,
            })}
          />
        </Prose>
      </div>
    </Wrapper>

    {
      tocItems.length > 4 && (
        <div class={s.tocWrapper}>
          <div class={s.toc}>
            <div class={s.tocTitle}>In this story:</div>
            <ul>
              {tocItems.map((item) => (
                <li>
                  <a href={item.url}>{item.label}</a>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )
    }
  </div>

  {
    siblingsWithFallback && (
      <SameLevelNavigation
        title="Not all stories are alike"
        subtitle="Discover how different teams work with DatoCMS in their own unique and unconventional ways"
      >
        {siblingsWithFallback.map((item) => (
          <Card
            href={buildUrlForCustomerStory(item)}
            title={item.title}
            orientation={siblingsWithFallback.length === 3 ? 'vertical' : 'horizontal'}
            size={siblingsWithFallback.length === 1 ? 'medium' : 'small'}
            fullTitleLength={true}
            lineClamp={2}
          >
            <Fragment slot="image">
              <ResponsiveImage data={item.coverImage.responsiveImage} />
            </Fragment>
          </Card>
        ))}
      </SameLevelNavigation>
    )
  }

  <DraftModeQueryListener query={query} variables={variables} />
</Layout>
