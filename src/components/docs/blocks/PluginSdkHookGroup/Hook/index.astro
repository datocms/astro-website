---
import { Heading } from '~/components/Heading';
import s from './style.module.css';
import { Markdown } from '~/components/Markdown';
import type {
  HookInfo,
  PropertiesOrMethodsGroup,
  PropertyOrMethod as PropertyOrMethodType,
} from '../manifestTypes';
import { fetchPluginSdkManifest } from '../utils';
import ExpandablePane from '../ExpandablePane/index.astro';
import PropertiesOrMethodsGroupPane from '../PropertiesOrMethodsGroupPane/index.astro';
import { Space } from '~/components/Space';

type Props = { hook: HookInfo };

const { hook } = Astro.props;

const sortByNameWithNullOnTop = (a: { name?: string }, b: { name?: string }): number => {
  // If both names are null, maintain their original order
  if (!a.name && !b.name) return 0;

  // If a's name is null, it should come first
  if (!a.name) return -1;

  // If b's name is null, it should come first
  if (!b.name) return 1;

  // If neither name is null, use localeCompare for alphabetical sorting
  return a.name.localeCompare(b.name);
};

function mergeUnnamedGroups(groups: PropertiesOrMethodsGroup[]): PropertiesOrMethodsGroup[] {
  const mergedItems: Record<string, PropertyOrMethodType> = {}; // To collect merged items

  const filteredGroups = groups.filter((group) => {
    // If group has no name and no comment, merge its items
    if (!group.name && !group.comment) {
      Object.assign(mergedItems, group.items); // Merge the items
      return false; // Exclude this group from the final array
    }
    return true; // Keep the group if it has a name or comment
  });

  // If there were any unnamed/uncommented groups, add the merged result as a new group
  if (Object.keys(mergedItems).length > 0) {
    filteredGroups.push({
      items: mergedItems, // Merged items from unnamed/uncommented groups
    });
  }

  return filteredGroups;
}

const manifest = await fetchPluginSdkManifest(Astro);

const specific = mergeUnnamedGroups(
  [
    ...(hook.ctxArgument?.additionalProperties || []),
    ...(hook.ctxArgument?.additionalMethods || []),
  ].sort(sortByNameWithNullOnTop),
);

const base = mergeUnnamedGroups(
  [
    ...manifest.baseCtx.properties,
    ...manifest.baseCtx.methods,
    ...(hook.ctxArgument?.type === 'SelfResizingPluginFrameCtx'
      ? [manifest.selfResizingPluginFrameCtxSizingUtilities]
      : []),
  ].sort(sortByNameWithNullOnTop),
);
---

<Space top={3} bottom={3}>
  <Heading anchor={hook.name} as="h4">
    <code
      >{hook.name}({
        [
          ...hook.nonCtxArguments.map((arg) => `${arg.name}: ${arg.typeName}`),
          ...(hook.ctxArgument ? [`ctx`] : []),
        ].join(', ')
      })</code
    >
  </Heading>

  {hook.comment?.markdownText && <Markdown of={hook.comment?.markdownText} />}

  {
    hook.returnType !== 'void' && (
      <>
        <Heading anchor={`${hook.name}-context`} as="h5" class={s.subchapter}>
          Return value
        </Heading>
        <p>
          The function must return: <code>{hook.returnType}</code>.
        </p>
      </>
    )
  }

  {
    hook.ctxArgument && (
      <>
        <Heading anchor={`${hook.name}-context-object`} as="h5" class={s.subchapter}>
          Context object
        </Heading>
        <p>
          The following properties and methods are available in the <code>ctx</code> argument:
        </p>

        {specific.length > 0 && (
          <ExpandablePane label="Hook-specific properties and methods">
            <p>
              This hook exposes additional information and operations specific to the context in
              which it operates.
            </p>
            {specific.map((group) => (
              <PropertiesOrMethodsGroupPane group={group} nonCollapsible={specific.length === 1} />
            ))}
          </ExpandablePane>
        )}

        <ExpandablePane label="Properties and methods available in every hook">
          <p>
            Every hook available in the Plugin SDK shares the same minumum set of properties and
            methods.
          </p>
          {base.map((group) => (
            <PropertiesOrMethodsGroupPane group={group} />
          ))}
        </ExpandablePane>
      </>
    )
  }
</Space>
