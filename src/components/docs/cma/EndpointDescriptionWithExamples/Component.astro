---
import { markdown } from '@astropub/md';
import { experimental_AstroContainer } from 'astro/container';
import replaceAsync from 'string-replace-async';
import type { AstroComponentFactory } from 'astro/runtime/server/index.js';
import type { CmaEndpoint, CmaEntity } from '../types';
import type { RestClientEndpointInfo } from '../fetchRestClientEndpointInfo';
import { examplePlaceholderRegexp } from '.';
import { invariant } from '~/lib/invariant';

type Props = {
  entity: CmaEntity;
  endpoint: CmaEndpoint;
  restClientEndpointInfo: RestClientEndpointInfo;
  description: string;
  examples: Array<{ id: string }>;
  exampleComponent: AstroComponentFactory;
};

const { entity, endpoint, restClientEndpointInfo, exampleComponent, description, examples } =
  Astro.props;

const content = await markdown(description, {
  fileURL: new URL(import.meta.url),
  contentDir: new URL('./', import.meta.url),
});

const container = await experimental_AstroContainer.create();

const contentWithSubstitutions = replaceAsync(
  content,
  examplePlaceholderRegexp,
  async (...args) => {
    const { exampleId } = args[args.length - 1] as { exampleId: string };
    const example = examples.find((example) => example.id === exampleId);

    if (!example) {
      return '';
    }

    return await container.renderToString(exampleComponent, {
      props: {
        id: example.id,
        entity,
        endpoint,
        restClientEndpointInfo,
        example,
      },
    });
  },
);
---

<Fragment set:html={contentWithSubstitutions} />
