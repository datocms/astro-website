---
import { Markdown } from '@astropub/md';
import { intersperse } from '~/lib/intersperse';
import type { PropertyDoc } from '../analyzeSchemaProperties';
import { ExpandablePane } from '../ExpandablePane';
import { PropertiesDoc } from '../PropertiesDoc';
import s from './style.module.css';

type Props = {
  propertyDoc: PropertyDoc;
  showRequiredOptional?: boolean;
};

const { propertyDoc, showRequiredOptional = true } = Astro.props;
---

<div class={s.schema}>
  <div class={s.header}>
    <span>
      {propertyDoc.prefix && <span class={s.prefix}>{propertyDoc.prefix}</span>}<span class={s.name}
        >{propertyDoc.property}</span
      >
    </span>

    <span>
      {
        intersperse(
          propertyDoc.types.map((type) => <code>{type}</code>),
          ', ',
        )
      }
    </span>

    {
      propertyDoc.deprecated ? (
        <span class={s.required}>Deprecated</span>
      ) : (
        showRequiredOptional &&
        (propertyDoc.required ? (
          <span class={s.required}>Required</span>
        ) : (
          <span class={s.optional}>Optional</span>
        ))
      )
    }
  </div>
  {
    propertyDoc.description && (
      <div class={s.description}>
        <Markdown of={propertyDoc.description} />
      </div>
    )
  }
  {
    propertyDoc.examples.length > 0 && (
      <div>
        {propertyDoc.examples.length > 1 ? <>Examples:</> : <>Example:</>}
        {intersperse(
          propertyDoc.examples.map((type) => <code>{JSON.stringify(type)}</code>),
          ', ',
        )}
      </div>
    )
  }
  {
    propertyDoc.moreInfo && (
      <ExpandablePane label={`Show ${propertyDoc.moreInfo.title}`}>
        <div class={s.properties}>
          <PropertiesDoc
            propertiesDoc={propertyDoc.moreInfo.properties}
            showRequiredOptional={showRequiredOptional}
          />
        </div>
      </ExpandablePane>
    )
  }
</div>
