---
type Props = {
  lightboxUrl: string;
};
---

<img-lightbox> <a href={Astro.props.lightboxUrl}><slot /></a></img-lightbox>

<script>
  // Copied from https://github.com/dkvz/img-lightbox/blob/master/src/shadow/img-lightbox.js

  const tpl = document.createElement('template');
  tpl.innerHTML = /*html*/ `
    <style>
      :host {
        display: block;
        cursor: pointer;
        position: relative;
      }

      :host([hidden]) {
        display: none;
      }

      :host(:focus), :host(:active) {
        outline: 2px solid #77b;
      }

      #loader {
        position: absolute;
        z-index: 1;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,.2);
        display: none;
        align-items: center;
        justify-content: center;
      }

      #overlay {
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        overflow: hidden;
        z-index: 99999999;
        background-color: rgba(0,0,0,.5);
        display: none;
        align-items: center;
        justify-content: center;
      }

      #overlay img {
        max-width: 100%;
        max-height: 100%;
        transition: transform 0.2s;
      }
    </style>

    <slot></slot>

    <div id="overlay" tabindex="0"></div>
    <div id="loader"></div>
  `;

  class ImgLightbox extends HTMLElement {
    private loading: boolean;
    private fullImage?: string;
    private overlay?: HTMLElement;
    private loadingOverlay?: HTMLElement;
    private img?: HTMLImageElement;

    constructor() {
      super();
      this.loading = false;
      this.attachShadow({ mode: 'open' });
    }

    connectedCallback(): void {
      // Append the template content to the shadow DOM.
      this.shadowRoot?.appendChild(tpl.content.cloneNode(true));

      // Get some element references from shadow DOM:
      this.overlay = this.shadowRoot?.querySelector('#overlay') as HTMLElement;
      this.loadingOverlay = this.shadowRoot?.querySelector('#loader') as HTMLElement;

      // Make the component focusable.
      this.tabIndex = 0;

      const link = this.querySelector('a');
      const img = this.querySelector('img');

      if (link) {
        // Store the URL as the full image URL:
        this.fullImage = link.getAttribute('href') || '';
        link.tabIndex = -1;
      } else if (img) {
        this.fullImage = img.getAttribute('src') || '';
      }

      if (this.fullImage) {
        this._addListeners();
      }
    }

    private _addListeners(): void {
      this.addEventListener('click', this.showLightbox.bind(this), true);
      this.addEventListener(
        'keydown',
        (e: KeyboardEvent) => {
          if (e.altKey) return;
          if (e.key === 'Enter' || e.key === ' ') {
            this.showLightbox(e);
          }
        },
        true,
      );
    }

    private showLightbox(e: Event): void {
      e.preventDefault();

      if (!this.loading && this.fullImage) {
        this.loading = true;
        this._showOverlay(this.loadingOverlay!);

        if (!this.img) {
          this.img = document.createElement('img');
          this.img.addEventListener('load', this.showImage.bind(this));
          this.img.src = this.fullImage;
          this.img.tabIndex = 1;

          ['click', 'keydown'].forEach((type) => {
            this.overlay?.addEventListener(type, (e: Event) =>
              this._hideOverlay(e.currentTarget as HTMLElement),
            );
          });

          this.overlay?.appendChild(this.img);
        } else {
          this.showImage();
        }
      }
    }

    private showImage(): void {
      if (this.img) {
        this.img.style.transform = 'scale(0.1)';
        this._hideOverlay(this.loadingOverlay!);
        this._showOverlay(this.overlay!);
        this.overlay?.focus();
        this.img.style.transform = 'scale(1)';
        this.loading = false;
      }
    }

    private _showOverlay(overlay: HTMLElement): void {
      overlay.style.display = 'flex';
    }

    private _hideOverlay(overlay: HTMLElement): void {
      overlay.style.display = '';
    }

    static template: HTMLTemplateElement;
  }

  customElements.define('img-lightbox', ImgLightbox);
</script>
