---
import s from './style.module.css';
import { HighlightStructuredText } from '../HighlightStructuredText';
import type { FragmentOf } from 'gql.tada';
import { QuotesCarouselFragment, ReviewCarouselFragment } from './graphql';
import { readFragment } from 'gql.tada';
import { ResponsiveImage } from '../ResponsiveImage';
import { MaybeLink } from '../MaybeLink';

interface Props {
  quotes: FragmentOf<typeof QuotesCarouselFragment>[] | FragmentOf<typeof ReviewCarouselFragment>[];
  animated?: boolean;
}

const { animated, quotes } = Astro.props;

function times(n: number): number[] {
  return Array.from({ length: n }, (_, i) => i);
}

function readCorrectFragment(quote: any) {
  switch (quote.__typename) {
    case 'PartnerTestimonialRecord':
      return readFragment(QuotesCarouselFragment, quote);
    case 'ReviewRecord':
      return readFragment(ReviewCarouselFragment, quote);
    default:
      return null;
  }
}

// const unmaskedQuotes = Astro.props.quotes.map((q) => readFragment(QuotesCarouselFragment, q));
const unmaskedQuotes = quotes.map((q) => readCorrectFragment(q)).filter(Boolean);
const repeatCount = animated ? (quotes.length / 4 > 1 ? 2 : 3) : 1;
---

<div class:list={[s.quotes, animated && s.isAnimated]} style={`--items-count: ${quotes.length}`}>
  <div class={s.quotesInner}>
    {
      times(repeatCount).map(() =>
        unmaskedQuotes.map((quote) =>
          quote.__typename === 'PartnerTestimonialRecord' ? (
            <MaybeLink
              href={quote.partner ? `/partners/${quote.partner.slug}` : undefined}
              class={s.root}
            >
              <div class={s.quote}>
                <HighlightStructuredText data={quote.quote} />
              </div>

              <div class={s.content}>
                <ResponsiveImage pictureClass={s.image} data={quote.image.responsiveImage} />
                <div class={s.authorRole}>
                  <div class={s.name}>{quote.name}</div>
                  <div class={s.role}>
                    {quote.role} @ {quote.partner.name}
                  </div>
                </div>
              </div>
            </MaybeLink>
          ) : (
            <article class={s.root}>
              <div class={s.quote}>
                <HighlightStructuredText data={quote.quote} />
              </div>

              <div class={s.content}>
                <ResponsiveImage pictureClass={s.image} data={quote.image.responsiveImage} />
                <div class={s.authorRole}>
                  <div class={s.name}>{quote.name}</div>
                  <div class={s.role}>{quote.role}</div>
                </div>
              </div>
            </article>
          ),
        ),
      )
    }
  </div>
</div>
