---
import s from './style.module.css';
import { HighlightStructuredText } from '../HighlightStructuredText';
import type { FragmentOf } from 'gql.tada';
import { QuotesCarouselFragment } from './graphql';
import { readFragment } from 'gql.tada';
import { ResponsiveImage } from '../ResponsiveImage';
import { MaybeLink } from '../MaybeLink';

interface Props {
  quotes: FragmentOf<typeof QuotesCarouselFragment>[];
  animated?: boolean;
}

const { animated } = Astro.props;

function times(n: number): number[] {
  return Array.from({ length: n }, (_, i) => i);
}

const quotes = Astro.props.quotes.map((q) => readFragment(QuotesCarouselFragment, q));
const repeatCount = animated ? (quotes.length / 4 > 1 ? 2 : 3) : 1;
---

<div
  class:list={['quotes', { quotesAnimated: animated }]}
  style={`--items-count: ${quotes.length}`}
>
  <div class={s.quotesInner}>
    {
      times(repeatCount).map(() =>
        quotes.map((quote) => (
          <MaybeLink
            href={quote.partner ? `/partners/${quote.partner.slug}` : undefined}
            class={s.root}
          >
            <div class={s.quote}>
              <HighlightStructuredText data={quote.quote} />
            </div>

            <div class={s.content}>
              <ResponsiveImage pictureClass={s.image} data={quote.image.responsiveImage} />
              <div class={s.authorRole}>
                <div class={s.name}>{quote.name}</div>
                <div class={s.role}>{quote.role}</div>
                {quote.partner && <div class={s.company}>{quote.partner.name}</div>}
              </div>
            </div>
          </MaybeLink>
        )),
      )
    }
  </div>
</div>
