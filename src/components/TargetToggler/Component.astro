---
type Props = {
  targetId: string;
  startVisible?: boolean;
};

const { targetId, startVisible } = Astro.props;
---

<target-toggler target-id={targetId} target-start-visible={startVisible ? 'true' : undefined}>
  <slot />
</target-toggler>

<style>
  target-toggler:not(:defined) {
    display: none;
  }

  target-toggler:defined {
    display: contents;
  }
</style>

<script>
  import { WebComponent } from '~/lib/WebComponent';

  window.customElements.define(
    'target-toggler',
    class TargetToggler extends WebComponent {
      toggle!: HTMLButtonElement;
      controller!: AbortController;

      connectedCallback() {
        this.toggle = this.$('button');

        if (this.startVisible) this.target.setAttribute('data-open', '');

        this.toggle.setAttribute('aria-expanded', this.startVisible ? 'true' : 'false');
        this.toggle.setAttribute('aria-controls', this.targetId);

        this.on(this.toggle, 'click', this.handleClick);
      }

      handleClick() {
        const expanded = this.toggle.getAttribute('aria-expanded') === 'true' || false;
        const newExpanded = !expanded;

        this.toggle?.setAttribute('aria-expanded', newExpanded ? 'true' : 'false');
        this.target?.toggleAttribute('data-open', newExpanded);
      }

      get target() {
        const el = document.getElementById(this.targetId);

        if (!el) {
          throw new Error(`[${this.localName}] cannot find element with id "${this.targetId}".`);
        }

        return el;
      }

      get targetId() {
        return this.getAttribute('target-id')!;
      }

      get startVisible() {
        const attr = 'target-start-visible';
        return (this.hasAttribute(attr) && this.getAttribute(attr) !== 'false') || false;
      }
    },
  );
</script>
