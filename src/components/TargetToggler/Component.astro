---
type Props = {
  targetId: string;
  startVisible?: boolean;
  closeOnClickOutside?: boolean;
};

const { targetId, startVisible, closeOnClickOutside } = Astro.props;
---

<target-toggler
  target-id={targetId}
  target-start-visible={startVisible ? 'true' : undefined}
  close-on-click-outside={closeOnClickOutside ? 'true' : undefined}
>
  <slot />
</target-toggler>

<script>
  import { WebComponent } from '~/lib/WebComponent';

  window.customElements.define(
    'target-toggler',
    class TargetToggler extends WebComponent {
      button!: HTMLButtonElement;
      controller!: AbortController;
      outsideClickController?: AbortController;

      parsedCallback() {
        this.button = this.$('button');

        if (this.startVisible) this.target.setAttribute('data-open', '');

        this.button.setAttribute('aria-expanded', this.startVisible ? 'true' : 'false');
        this.button.setAttribute('aria-controls', this.targetId);

        this.on(this.button, 'click', this.handleClick);
      }

      handleClick() {
        this.toggle();
      }

      handleClickOutside = (event: MouseEvent) => {
        const targetElement = event.target as Node;

        // Check if the click is outside both the toggler and the target
        if (!this.contains(targetElement) && !this.target.contains(targetElement)) {
          this.toggle(false);
        }
      };

      setupOutsideClickListener() {
        if (!this.closeOnClickOutside) return;

        // Clean up existing listener if any
        this.outsideClickController?.abort();

        // Set up new listener
        this.outsideClickController = new AbortController();
        document.addEventListener('click', this.handleClickOutside, {
          signal: this.outsideClickController.signal,
          capture: true,
        });
      }

      cleanupOutsideClickListener() {
        this.outsideClickController?.abort();
        this.outsideClickController = undefined;
      }

      disconnectedCallback() {
        this.cleanupOutsideClickListener();
      }

      get target() {
        const el = document.getElementById(this.targetId);

        if (!el) {
          throw new Error(`[${this.localName}] cannot find element with id "${this.targetId}".`);
        }

        return el;
      }

      get targetId() {
        return this.getAttribute('target-id')!;
      }

      get startVisible() {
        const attr = 'target-start-visible';
        return (this.hasAttribute(attr) && this.getAttribute(attr) !== 'false') || false;
      }

      get closeOnClickOutside() {
        const attr = 'close-on-click-outside';
        return (this.hasAttribute(attr) && this.getAttribute(attr) !== 'false') || false;
      }

      get isExpanded() {
        return this.button.getAttribute('aria-expanded') === 'true' || false;
      }

      toggle(newExpanded: boolean = !this.isExpanded) {
        this.button?.setAttribute('aria-expanded', newExpanded ? 'true' : 'false');
        this.target?.toggleAttribute('data-open', newExpanded);

        // Manage outside click listener based on expanded state
        if (newExpanded) {
          this.setupOutsideClickListener();
        } else {
          this.cleanupOutsideClickListener();
        }

        this.dispatchEvent(
          new CustomEvent('target-toggler:toggle', {
            bubbles: true,
            cancelable: true,
            detail: { expanded: newExpanded },
          }),
        );
      }
    },
  );
</script>
