{
  $schema: 'https://unpkg.com/@datocms/cubo@0.2.15/schemas/cubo-config-schema.json',
  dockerImage: 'ghcr.io/datocms/astro-website',
  environments: {
    production: {
      build: {
        args: {
          PUBLIC_HOSTNAME: 'www.datocms.com',
          RECAPTCHA_KEY: '6Lda4UkgAAAAAE14pGAmMkbHKJCKOzmRoVc9_DE5',
        },
        envVarSecrets: ['DATOCMS_API_TOKEN'],
      },
      kubernetes: {
        cluster: 'dato-production',
        namespace: 'dato-production-website',
        region: 'eu-west-1',
      },
      deployments: {
        astro: {
          type: 'web',
          healthCheckPathname: '/up',
          cmd: 'node ./dist/server/entry.mjs',
          resourceRequirements: 'standard-1x',
          scale: {
            min: 1,
            max: 2,
          },
          loadBalancer: {
            hostname: 'www-draft.datocms.com',
            annotations: {
              'alb.ingress.kubernetes.io/certificate-arn': 'arn:aws:acm:eu-west-1:734741016184:certificate/e02f4399-a36a-4330-9f27-20112f24fdde',
            },
          },
        },
      },
      cronJobs: {
        'invalidate-data-sources': {
          schedule: '*/10 * * * *',
          cmd: 'npm run invalidate-data-sources',
          resourceRequirements: {
            cpu: {
              request: '50m',
              limit: '100m',
            },
            ram: {
              request: '10Mi',
              limit: '50Mi',
            },
          },
        },
        'datocms-site-search-reindex': {
          schedule: '0 0 * * *',
          cmd: 'npm run reindex-site-search',
          resourceRequirements: {
            cpu: {
              request: '50m',
              limit: '100m',
            },
            ram: {
              request: '10Mi',
              limit: '50Mi',
            },
          },
        },
      },
    },
    staging1: {
      build: {
        args: {
          PUBLIC_HOSTNAME: 'www.staging-datocms.com',
          RECAPTCHA_KEY: '6Lda4UkgAAAAAE14pGAmMkbHKJCKOzmRoVc9_DE5',
        },
        envVarSecrets: ['DATOCMS_API_TOKEN'],
      },
      kubernetes: {
        cluster: 'dato-staging-eu1',
        namespace: 'dato-staging-eu1-website',
        region: 'eu-west-1',
      },
      deployments: {
        astro: {
          type: 'web',
          healthCheckPathname: '/up',
          cmd: 'node ./dist/server/entry.mjs',
          resourceRequirements: 'standard-1x',
          scale: {
            min: 1,
            max: 2,
          },
          loadBalancer: {
            hostname: 'www-draft.staging-datocms.com',
            annotations: {
              'alb.ingress.kubernetes.io/certificate-arn': 'arn:aws:acm:eu-west-1:734741016184:certificate/d691d518-f3fd-4feb-99fa-b51cb127b2fe',
            },
          },
        },
      },
      cronJobs: {
        'invalidate-data-sources': {
          schedule: '*/10 * * * *',
          cmd: 'npm run invalidate-data-sources',
          resourceRequirements: {
            cpu: {
              request: '50m',
              limit: '100m',
            },
            ram: {
              request: '10Mi',
              limit: '50Mi',
            },
          },
        },
      },
    },
    staging2: {
      build: {
        args: {
          PUBLIC_HOSTNAME: 'www-2.staging-datocms.com',
          RECAPTCHA_KEY: '6Lda4UkgAAAAAE14pGAmMkbHKJCKOzmRoVc9_DE5',
        },
        envVarSecrets: ['DATOCMS_API_TOKEN'],
      },
      kubernetes: {
        cluster: 'dato-staging-eu2',
        namespace: 'dato-staging-eu2-website',
        region: 'eu-west-1',
      },
      deployments: {
        astro: {
          type: 'web',
          healthCheckPathname: '/up',
          cmd: 'node ./dist/server/entry.mjs',
          resourceRequirements: 'standard-1x',
          scale: {
            min: 1,
            max: 2,
          },
          loadBalancer: {
            hostname: 'www-draft-2.staging-datocms.com',
            annotations: {
              'alb.ingress.kubernetes.io/certificate-arn': 'arn:aws:acm:eu-west-1:734741016184:certificate/d691d518-f3fd-4feb-99fa-b51cb127b2fe',
            },
          },
        },
      },
      cronJobs: {
        'invalidate-data-sources': {
          schedule: '*/10 * * * *',
          cmd: 'npm run invalidate-data-sources',
          resourceRequirements: {
            cpu: {
              request: '50m',
              limit: '100m',
            },
            ram: {
              request: '10Mi',
              limit: '50Mi',
            },
          },
        },
      },
    },
  },
}
